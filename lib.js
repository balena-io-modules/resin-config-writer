// Generated by CoffeeScript 1.8.0
(function() {
  var CombinedStream, Promise, Stream, cp, es, fixedLengthStream, fs, getPartitionInfo, parseMBR;

  Promise = require('bluebird');

  fs = Promise.promisifyAll(require('fs'));

  cp = Promise.promisifyAll(require('child_process'));

  CombinedStream = require('combined-stream');

  Stream = require('stream').Stream;

  es = require('event-stream');

  fixedLengthStream = require('fixed-stream').fixedLengthStream;

  exports.parseMBR = parseMBR = function(path) {
    return cp.execAsync("parted -s -m " + path + " unit B print")["catch"](function(e) {
      throw new Error("Failed to list partitions from file " + path);
    }).then(function(stdout, stderr) {
      return stdout.toString().split('\n').slice(2);
    }).map(function(line) {
      var info;
      info = line.split(':');
      return {
        number: info[0],
        start: parseInt(info[1]),
        end: parseInt(info[2]),
        size: parseInt(info[3]),
        fs: info[4],
        name: info[5],
        flags: info[6]
      };
    });
  };

  exports.getPartitionInfo = getPartitionInfo = function(path, partitionNumber) {
    return parseMBR(path).then(function(mbr) {
      if (mbr[partitionNumber] == null) {
        throw new RangeError('Disk does not have such partition.');
      }
      return mbr[partitionNumber];
    });
  };

  exports.replacePartition = function(path, partitionNumber, data) {
    return Promise["try"](function() {
      if (typeof data !== 'string' && !Buffer.isBuffer(data) && !(data instanceof Stream)) {
        throw new TypeError('Parameter data should be string, buffer or stream.');
      }
      if (typeof partitionNumber !== 'number') {
        throw new TypeError('Parameter partitionNumber should be a number.');
      }
      if (data instanceof Stream) {
        data.pause();
      }
      return getPartitionInfo(path, partitionNumber).then(function(partition) {
        var combinedStream;
        if (typeof data === 'string' || Buffer.isBuffer(data)) {
          if (data.length > partition.size) {
            throw new RangeError('Contents should not be larger than partition size.');
          }
          data = es.through().pause().queue(data).end();
        }
        combinedStream = CombinedStream.create();
        combinedStream.append(fs.createReadStream(path, {
          start: 0,
          end: partition.start - 1
        }));
        combinedStream.append(data.pipe(fixedLengthStream(partition.size)));
        combinedStream.append(fs.createReadStream(path, {
          start: partition.end + 1
        }));
        return combinedStream;
      });
    });
  };

}).call(this);
