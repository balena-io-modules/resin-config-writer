// Generated by CoffeeScript 1.7.1
(function() {
  var CombinedStream, Promise, cp, fs, getPartitionInfo, parseMBR, replacePartition;

  Promise = require('bluebird');

  fs = Promise.promisifyAll(require('fs'));

  cp = Promise.promisifyAll(require('child_process'));

  CombinedStream = require('combined-stream');

  exports.parseMBR = parseMBR = function(path) {
    return cp.execAsync("parted -s -m " + path + " unit B print").then(function(stdout, stderr) {
      return stdout.toString().split('\n').slice(2);
    }).map(function(line) {
      var info;
      info = line.split(':');
      return {
        number: info[0],
        start: parseInt(info[1]),
        end: parseInt(info[2]),
        size: parseInt(info[3]),
        fs: info[4],
        name: info[5],
        flags: info[6]
      };
    });
  };

  getPartitionInfo = function(path, partitionNumber) {
    return parseMBR(path).then(function(mbr) {
      if (mbr[partitionNumber] == null) {
        throw new RangeError('Disk does not have such partition.');
      }
      return mbr[partitionNumber];
    });
  };

  exports.replacePartition = replacePartition = function(path, partitionNumber, data) {
    if (typeof data !== 'string' && !Buffer.isBuffer(data)) {
      throw new TypeError('Parameter data should be string or buffer');
    }
    return getPartitionInfo(path, partitionNumber).then(function(partition) {
      var combinedStream;
      if (typeof data === 'string') {
        data = new Buffer(data);
      }
      if (data.length > partition.size) {
        throw new RangeError('Contents should not be larger than partition size.');
      }
      combinedStream = CombinedStream.create();
      combinedStream.append(fs.createReadStream(path, {
        start: 0,
        end: partition.start - 1
      }));
      combinedStream.append(data);
      if (partition.size > data.length) {
        combinedStream.append(fs.createReadStream('/dev/zero', {
          start: 0,
          end: partition.size - data.length - 1
        }));
      }
      combinedStream.append(fs.createReadStream(path, {
        start: partition.end + 1
      }));
      return combinedStream;
    });
  };

}).call(this);
